function kernel_matrix = shear_matrix_g(v,w,t,lambda)

nv = length(v);
nw = length(w);
infinity = 10^10;

interpolate_matrix = linear_simpleinfty_interpolate_g(v,t,lambda);
function_matrix = zeros(nw,2*nv);


%FINDS ALL THE KERNEL FUNCTIONS


%finds the kernel K21

K21x1 = @(x,z) -real(16.*x.*(4+(x+(-1).*z).^2).^(-2)+(-8).*x.* ...
    ...
    (4+(x+(-1).*z).^2).^(-1)+ 2.*(4+(x+(-1).*z).^2).^(-1).*z+ ...
    ...
    4.*atan((1/2).*(x+(-1).*z))+(-1/2) ...
    ...
    .*z.*log(4+(x+(-1).*z).^2)+z.*log(x+(-1).*z));
  
  
K21x0 = @(x,z) -real(2.*(8+(-3).*(4+(x+(-1).*z).^2)).* ...
    ...    
    (4+(x+(-1).*z).^2).^(-2)+(-1/2).*log(4+(x+(-1).*z).^2)+log(x+(-1).*z));
  

    
%finds the kernel K21

K21sqrtx1 = @(x,z,at,ath,ath2) -real((1/2).*(32.*x.^(1/2).*( ...
    ...
    (4+(x+(-1).*z).^2).^(-2)+(-1/16).*(4+z.^2) ...
    ...
    .^(-1).*(4+x.^2+(-2).*x.*z+z.^2).^(-1).*(28+x.*z+5.*z.^2))+((sqrt( ...
    ...
    -1)*2)+(-1).*z).^(-3/2).*((-11)+(sqrt(-1)*(-10)).*z+2.*z.^2).* ...
    ...
    at+(-4).*z.^(1/2).*ath2+((sqrt(-1)*2)+z).^(-3/2).*((-11)+(sqrt( ...
    ...
    -1)*10).*z+2.*z.^2).*ath));
  
K21sqrtx0 = @(x,z,at,ath,ath2) -real((1/2).*( ...
    ...
    2.*x.^(1/2).*(4+(x+(-1).*z).^2).^(-2).*(4+z.^2).^(-2).*(( ...
    ...
    -16).*(x+(-2).*z).*(4+z.^2)+(4+x.^2+(-2).*x.*z+z.^2).*(4.*x+(-4).* ...
    ...
    z+7.*x.*z.^2+(-13).*z.^3))+(-1).*((sqrt(-1)*2)+(-1).*z).^(-5/2).*( ...
    ...
    (-7)+(sqrt(-1)*(-6)).*z+2.*z.^2).*at +(-4).*z.^(-1/2).*ath2+(( ...
    ...
    sqrt(-1)*2)+z).^(-5/2).*((-7)+(sqrt(-1)*6).*z+2.*z.^2).*ath));


for i=1:nw
    %goes over the 1/sqrt(x) panels
    % All code vectorised for speed. Common expresions computed first.
    x_t = v(1:t);
    %
    atan_store_1 = atan(x_t.^(1/2).*((sqrt(-1)*2)+(-1)*w(i)).^(-1/2));
    %
    atanh_store_1 = atanh(x_t.^(1/2).*((sqrt(-1)*2)+w(i)).^(-1/2));
    atanh_store_2 = atanh(x_t.^(1/2).*w(i).^(-1/2));
    
    K21sqrtx1_store = K21sqrtx1(x_t,w(i),atan_store_1,atanh_store_1,atanh_store_2);
    K21sqrtx0_store = K21sqrtx0(x_t,w(i),atan_store_1,atanh_store_1,atanh_store_2);
  
    j=1:t-1;
    %for K11

    %for K21
    function_matrix(i,j)     = K21sqrtx1_store(j+1)-K21sqrtx1_store(j);
    function_matrix(i,nv+j)   = K21sqrtx0_store(j+1)-K21sqrtx0_store(j);
    
   
    %goes over the linear panels including infinity
    x_tmp = [v(t:nv) infinity];
    
    K21x1_store = K21x1(x_tmp,w(i));
    K21x0_store = K21x0(x_tmp,w(i));
    
    %
    j=1:nv-t+1;
    %for K21
    function_matrix(i,j+t-1)    = K21x1_store(j+1)-K21x1_store(j);
    function_matrix(i,nv+j+t-1) = K21x0_store(j+1)-K21x0_store(j);

  
end        

%kernel_matrix = function_matrix*interpolate_matrix;

% The following lines are equivalent to:
%h_co_mat = h_coeff_mat*interpolate_matrix;
% But we know that the interpolate matrix is essentially diagonal, so we
% can save ourselves time by doing the multiplication ourselves
kernel_matrix = zeros(nw,nv);
kernel_matrix(:,1) = ...
    interpolate_matrix(1,1)*function_matrix(:,1)+...
    + interpolate_matrix(nv+1,1)*function_matrix(:,nv+1);
for k = 2:nv-2
    kernel_matrix(:,k) = ...
        interpolate_matrix(k,k)    *function_matrix(:,k)   + ...
        interpolate_matrix(k-1,k)  *function_matrix(:,k-1) + ...
        interpolate_matrix(nv+k,k)  *function_matrix(:,nv+k) + ...
        interpolate_matrix(nv+k-1,k)*function_matrix(:,nv+k-1);
end
kernel_matrix(:,nv-1) = ...
    interpolate_matrix(nv-2,nv-1)  *function_matrix(:,nv-2)   + ...
    interpolate_matrix(nv-1,nv-1)  *function_matrix(:,nv-1)   + ...
    interpolate_matrix(nv,nv-1)    *function_matrix(:,nv)     + ...
    interpolate_matrix(2*nv-2,nv-1)*function_matrix(:,2*nv-2) + ...
    interpolate_matrix(2*nv-1,nv-1)*function_matrix(:,2*nv-1) + ...
    interpolate_matrix(2*nv,nv-1)  *function_matrix(:,2*nv);

kernel_matrix(:,nv) = ...
    interpolate_matrix(nv-1,nv)  *function_matrix(:,nv-1)     + ...
    interpolate_matrix(nv,nv)    *function_matrix(:,nv)       + ...
    interpolate_matrix(2*nv-1,nv)*function_matrix(:,2*nv-1)   + ...
    interpolate_matrix(2*nv,nv)  *function_matrix(:,2*nv);

return
end
    