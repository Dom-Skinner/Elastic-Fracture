function [kernel_matrix, interpolate_matrix] = pressure_shear_matrix(x,z,t,lambda)

n = length(x);
infinity = 10^10;

interpolate_matrix = linear_simpleinfty_interpolate(x,t,lambda);
function_matrix = zeros(2*(n-1),4*n);



%FINDS ALL THE KERNEL FUNCTIONS

K11x1 = @(x,z) real(4.*(4+3.*x.^2+(-4).*x.*z+z.^2).* ...
    (4+x.^2+(-2).*x.*z+z.^2).^(-2));
  
K11x0 = @(x,z) real(8.*(4+(x+(-1).*z).^2).^(-2).*(x+(-1).*z));


%finds the kernel K12

K12x1 = @(x,z) real(2.*(4+(x+(-1).*z).^2).^(-2).*((-8).*x+(-1).* ...
    ...
    (4+(x+(-1).*z).^2).*z) ...
    ...
    +(1/2).*z.*log(4+(x+(-1).*z).^2)+(-1).*z.*log(x+(-1).*z));
  
  
K12x0 = @(x,z) real((-2).*(4+x.^2+(-2).*x.*z+z.^2).^(-2).* ...
        ...
        (12+x.^2+(-2).*x.*z+z.^2)+(1/2).*log(4+(x+(-1).*z).^2)+ ...
        ...
        (-1).*log(x+(-1).*z));



%finds the kernel K21

K21x1 = @(x,z) -real(16.*x.*(4+(x+(-1).*z).^2).^(-2)+(-8).*x.* ...
    ...
    (4+(x+(-1).*z).^2).^(-1)+ 2.*(4+(x+(-1).*z).^2).^(-1).*z+ ...
    ...
    4.*atan((1/2).*(x+(-1).*z))+(-1/2) ...
    ...
    .*z.*log(4+(x+(-1).*z).^2)+z.*log(x+(-1).*z));
  
  
  
K21x0 = @(x,z) -real(2.*(8+(-3).*(4+(x+(-1).*z).^2)).* ...
    ...    
    (4+(x+(-1).*z).^2).^(-2)+(-1/2).*log(4+(x+(-1).*z).^2)+log(x+(-1).*z));




%finds the kernel K22

K22x1 = @(x,z) -real(4.*(4+3.*x.^2+(-4).*x.*z+z.^2).* ...
    ...
    (4+x.^2+(-2).*x.*z+z.^2).^(-2));

  
  
K22x0 = @(x,z) -real(8.*(4+(x+(-1).*z).^2).^(-2).*(x+(-1).*z));

  

K11sqrtx1 = @(x,z,at,at2) real((-2).*x.^(1/2).*(4+z.^2).^(-1).* ...
    ... 
    (4+x.^2+(-2).*x.*z+z.^2).^(-2).*( ...
    ...
    x.^3+(-4).*x.^2.*z+x.*((-12)+z.^2)+2.*z.*(4+z.^2))+(sqrt(-1)*(1/2) ...
    ...
    ).*((sqrt(-1)*(-2))+(-1).*z).^(-3/2).*at2+(sqrt(-1)*(-1/2)) ...
    ...
    .*((sqrt(-1)*2)+(-1).*z).^(-3/2).*at);
  
  
K11sqrtx0 = @(x,z,at,at2) real(2.*x.^(1/2).*(4+z.^2).^(-2).* ...
    ...
    (4+x.^2+(-2).*x.*z+z.^2).^(-2).*(6.* ...
    ...
    x.^3.*z+x.^2.*(4+(-23).*z.^2)+32.*x.*(z+z.^3)+(-5).*((-16)+8.* ...
    ...
    z.^2+3.*z.^4))+(sqrt(-1)*(3/2)).*((sqrt(-1)*(-2))+(-1).*z).^(-5/2) ...
    ...
    .*at2+(sqrt(-1)*(-3/2)).*((sqrt(-1)*2)+(-1).*z).^(-5/2).*at);

%finds the kernel K12

K12sqrtx1 = @(x,z,at,ath,ath2) real((1/2).*(2.*x.^(1/2).* ... 
    ...
    (4+(x+(-1).*z).^2).^(-2).*((-16)+((-4)+x.*z+( ...
    ...
    -3).*z.^2).*(4+z.^2).^(-1).*(4+x.^2+(-2).*x.*z+z.^2))+(-1).*(( ...
    ...
    sqrt(-1)*2)+(-1).*z).^(-3/2).*((-3)+(sqrt(-1)*(-6)).*z+2.*z.^2).* ...
    ...
    at+4.*z.^(1/2).*ath2+(-1).*((sqrt(-1)*2)+z).^(-3/2).*((-3)+(sqrt( ...
    ...
    -1)*6).*z+2.*z.^2).*ath));
  
  
K12sqrtx0 = @(x,z,at,ath,ath2) real((1/2).*(2.*x.^(1/2).*(4+ ...
    (x+(-1).*z).^2).^(-2).*(4+z.^2).^(-2).*( ...
    ...
    16.*(x+(-2).*z).*(4+z.^2)+(4+x.^2+(-2).*x.*z+z.^2).*((-3).*z.*(20+ ...
    ...
    z.^2)+x.*(28+z.^2)))+((sqrt(-1)*2)+(-1).*z).^(-5/2).*((-15)+(sqrt( ...
    ...
    -1)*(-10)).*z+2.*z.^2).*at+4.*z.^(-1/2).*ath2+(-1).*((sqrt(-1)* ...
    ...
    2)+z).^(-5/2).*((-15)+(sqrt(-1)*10).*z+2.*z.^2).*ath));
    
%finds the kernel K21

K21sqrtx1 = @(x,z,at,ath,ath2) -real((1/2).*(32.*x.^(1/2).*( ...
    ...
    (4+(x+(-1).*z).^2).^(-2)+(-1/16).*(4+z.^2) ...
    ...
    .^(-1).*(4+x.^2+(-2).*x.*z+z.^2).^(-1).*(28+x.*z+5.*z.^2))+((sqrt( ...
    ...
    -1)*2)+(-1).*z).^(-3/2).*((-11)+(sqrt(-1)*(-10)).*z+2.*z.^2).* ...
    ...
    at+(-4).*z.^(1/2).*ath2+((sqrt(-1)*2)+z).^(-3/2).*((-11)+(sqrt( ...
    ...
    -1)*10).*z+2.*z.^2).*ath));
  
K21sqrtx0 = @(x,z,at,ath,ath2) -real((1/2).*( ...
    ...
    2.*x.^(1/2).*(4+(x+(-1).*z).^2).^(-2).*(4+z.^2).^(-2).*(( ...
    ...
    -16).*(x+(-2).*z).*(4+z.^2)+(4+x.^2+(-2).*x.*z+z.^2).*(4.*x+(-4).* ...
    ...
    z+7.*x.*z.^2+(-13).*z.^3))+(-1).*((sqrt(-1)*2)+(-1).*z).^(-5/2).*( ...
    ...
    (-7)+(sqrt(-1)*(-6)).*z+2.*z.^2).*at +(-4).*z.^(-1/2).*ath2+(( ...
    ...
    sqrt(-1)*2)+z).^(-5/2).*((-7)+(sqrt(-1)*6).*z+2.*z.^2).*ath));

%finds the kernel K22


K22sqrtx1 = @(x,z,at,at2) -real((-2).*x.^(1/2).*(4+z.^2).^(-1).* ...
    (4+x.^2+(-2).*x.*z+z.^2).^(-2).*( ...
    ...
    x.^3+(-4).*x.^2.*z+x.*((-12)+z.^2)+2.*z.*(4+z.^2))+(sqrt(-1)*(1/2) ...
    ...
    ).*((sqrt(-1)*(-2))+(-1).*z).^(-3/2).*at2+(sqrt(-1)*(-1/2)).* ...
    ((sqrt(-1)*2)+(-1).*z).^(-3/2).*at);
  
K22sqrtx0 = @(x,z,at,at2) -real(2.*x.^(1/2).*(4+z.^2).^(-2).* ...
    (4+x.^2+(-2).*x.*z+z.^2).^(-2).*(6.* ...
    ...
    x.^3.*z+x.^2.*(4+(-23).*z.^2)+32.*x.*(z+z.^3)+(-5).*((-16)+8.* ...
    ...
    z.^2+3.*z.^4))+(sqrt(-1)*(3/2)).*((sqrt(-1)*(-2))+(-1).*z).^(-5/2) ...
    ...
    .*at2+(sqrt(-1)*(-3/2)).*((sqrt(-1)*2)+(-1).*z).^(-5/2).*at);


for i=1:n-1
    %goes over the 1/sqrt(x) panels
    % All code vectorised for speed. Common expresions computed first.
    x_t = x(1:t);
    %
    atan_store_1 = atan(x_t.^(1/2).*((sqrt(-1)*2)+(-1)*z(i)).^(-1/2));
    atan_store_2 = atan(x_t.^(1/2).*((sqrt(-1)*(-2))+(-1)*z(i)).^(-1/2));
    %
    atanh_store_1 = atanh(x_t.^(1/2).*((sqrt(-1)*2)+z(i)).^(-1/2));
    atanh_store_2 = atanh(x_t.^(1/2).*z(i).^(-1/2));
    
    K11sqrtx1_store = K11sqrtx1(x_t,z(i),atan_store_1,atan_store_2); 
    K11sqrtx0_store = K11sqrtx0(x_t,z(i),atan_store_1,atan_store_2); 
    %K12sqrtx1_store = K12sqrtx1(x_t,z(i),atan_store_1,atanh_store_1,atanh_store_2);
    K12x0_store = K12x0(x_t,z(i));
    K12sqrtx0_store = K12sqrtx0(x_t,z(i),atan_store_1,atanh_store_1,atanh_store_2);
    K21sqrtx1_store = K21sqrtx1(x_t,z(i),atan_store_1,atanh_store_1,atanh_store_2);
    K21sqrtx0_store = K21sqrtx0(x_t,z(i),atan_store_1,atanh_store_1,atanh_store_2);
    %K22sqrtx1_store = K22sqrtx1(x_t,z(i),atan_store_1,atan_store_2);
    K22x0_store = K22x0(x_t,z(i));
    K22sqrtx0_store = K22sqrtx0(x_t,z(i),atan_store_1,atan_store_2);
    
    j=1:t-1;
    %for K11
    function_matrix(i,j)         = K11sqrtx1_store(j+1)-K11sqrtx1_store(j);
    function_matrix(i,n+j)       = K11sqrtx0_store(j+1)-K11sqrtx0_store(j);
    %for K12
    %function_matrix(i,2*n+j)    = K12sqrtx1_store(j+1)-K12sqrtx1_store(j);
    function_matrix(i,2*n+j)     = K12x0_store(j+1)-K12x0_store(j);
    function_matrix(i,3*n+j)     = K12sqrtx0_store(j+1)-K12sqrtx0_store(j);
    %for K21
    function_matrix(n-1+i,j)     = K21sqrtx1_store(j+1)-K21sqrtx1_store(j);
    function_matrix(n-1+i,n+j)   = K21sqrtx0_store(j+1)-K21sqrtx0_store(j);
    %for K22
    %function_matrix(n-1+i,2*n+j)= K22sqrtx1_store(j+1)-K22sqrtx1_store(j);
    function_matrix(n-1+i,2*n+j) = K22x0_store(j+1)-K22x0_store(j);
    function_matrix(n-1+i,3*n+j) = K22sqrtx0_store(j+1)-K22sqrtx0_store(j);
   
    %goes over the linear panels including infinity
    x_tmp = [x(t:n) infinity];
    K11x1_store = K11x1(x_tmp,z(i));
    K11x0_store = K11x0(x_tmp,z(i));
    K12x1_store = K12x1(x_tmp,z(i));
    K12x0_store = K12x0(x_tmp,z(i));
    K21x1_store = K21x1(x_tmp,z(i));
    K21x0_store = K21x0(x_tmp,z(i));
    K22x1_store = K22x1(x_tmp,z(i));
    K22x0_store = K22x0(x_tmp,z(i));
    %
    j=1:n-t+1;
    %
    function_matrix(i,j+t-1)           = K11x1_store(j+1)-K11x1_store(j);
    function_matrix(i,n+j+t-1)         = K11x0_store(j+1)-K11x0_store(j);
    %for K12
    function_matrix(i,2*n+j+t-1)       = K12x1_store(j+1)-K12x1_store(j);
    function_matrix(i,2*n+n+j+t-1)     = K12x0_store(j+1)-K12x0_store(j);
    %for K21
    function_matrix(n-1+i,j+t-1)       = K21x1_store(j+1)-K21x1_store(j);
    function_matrix(n-1+i,n+j+t-1)     = K21x0_store(j+1)-K21x0_store(j);
    %for K22
    function_matrix(n-1+i,2*n+j+t-1)   = K22x1_store(j+1)-K22x1_store(j);
    function_matrix(n-1+i,2*n+n+j+t-1) = K22x0_store(j+1)-K22x0_store(j);
  
end        

%kernel_matrix = function_matrix*interpolate_matrix;

% The following lines are equivalent to:
%h_co_mat = h_coeff_mat*interpolate_matrix;
% But we know that the interpolate matrix is essentially diagonal, so we
% can save ourselves time by doing the multiplication ourselves
kernel_matrix = zeros(2*n-2,2*n);
for m = [0,n]
kernel_matrix(:,1+m) = ...
    interpolate_matrix(1+2*m,1+m)*function_matrix(:,1+2*m)+...
    + interpolate_matrix(n+1,1)*function_matrix(:,n+1+2*m);
for k = 2:n-2
    kernel_matrix(:,k+m) = ...
        interpolate_matrix(k+2*m,k+m)    *function_matrix(:,k+2*m)   + ...
        interpolate_matrix(k-1+2*m,k+m)  *function_matrix(:,k-1+2*m) + ...
        interpolate_matrix(n+k+2*m,k+m)  *function_matrix(:,n+k+2*m) + ...
        interpolate_matrix(n+k-1+2*m,k+m)*function_matrix(:,n+k-1+2*m);
end
kernel_matrix(:,n-1+m) = ...
    interpolate_matrix(n-2+2*m,n-1+m)  *function_matrix(:,n-2+2*m)   + ...
    interpolate_matrix(n-1+2*m,n-1+m)  *function_matrix(:,n-1+2*m)   + ...
    interpolate_matrix(n+2*m,n-1+m)    *function_matrix(:,n+2*m)     + ...
    interpolate_matrix(2*n-2+2*m,n-1+m)*function_matrix(:,2*n-2+2*m) + ...
    interpolate_matrix(2*n-1+2*m,n-1+m)*function_matrix(:,2*n-1+2*m) + ...
    interpolate_matrix(2*n+2*m,n-1+m)  *function_matrix(:,2*n+2*m);

kernel_matrix(:,n+m) = ...
    interpolate_matrix(n-1+2*m,n+m)  *function_matrix(:,n-1+2*m)     + ...
    interpolate_matrix(n+2*m,n+m)    *function_matrix(:,n+2*m)       + ...
    interpolate_matrix(2*n-1+2*m,n+m)*function_matrix(:,2*n-1+2*m)   + ...
    interpolate_matrix(2*n+2*m,n+m)  *function_matrix(:,2*n+2*m);
end   

return
end
    